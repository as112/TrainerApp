@page "/exercises"

@using MyTrainer.Models
@using MyTrainer.Data

@inject Repository<Exercise> ExerciseRepository

<div class="mb-5">
    <Button Class="btn btn-outline-secondary btn-sm" @onclick="@(() => ShowAddExerciseComponent(Guid.Empty))">Add new</Button>
</div>

@if(@exercises is not null)
{
    @foreach (var group in exercisesGroups)
    {
        <Accordion>
            <AccordionItem Title="@group.Key">
                <Content>
                    @foreach (var exercise in group)
                    {
                        <Accordion>
                            <AccordionItem Title="@exercise.Name">
                                <Content>
                                    <b>@exercise.Description</b><br />
                                    <b>@exercise.MuscleGroup</b><br />
                                    <a href="@exercise.Url">Link</a><br />
                                    <Button Class="btn btn-outline-secondary btn-sm" @onclick="@(() => ShowEditExerciseComponent(exercise.Id))">Edit</Button>
                                    <Button Class="btn btn-outline-danger btn-sm" @onclick="@(() => ShowConfirmationAsync(exercise))">Delete</Button>
                                </Content>
                            </AccordionItem>
                        </Accordion>
                    }
                </Content>
            </AccordionItem>
        </Accordion>
    }
}
else
{

}

<Offcanvas @ref="offcanvas" />
<ConfirmDialog @ref="dialog" />

@code {
    private Offcanvas offcanvas = default!;
    private List<Exercise> exercises = new();
    private ConfirmDialog dialog = default!;
    private List<IGrouping<string, Exercise>> exercisesGroups = default!;

    protected override async Task OnInitializedAsync()
    {
        var baseExercises = await ExerciseRepository.GetAllWithPredicate(s => s.WorkoutId == null);
        exercises = baseExercises.ToList();
        exercisesGroups = baseExercises
            .GroupBy(s => s.MuscleGroup)
            .OrderBy(x => x.Key)
            .ToList();
    }
    private async Task Load()
    {
        await offcanvas.HideAsync();
        var baseExercises = await ExerciseRepository.GetAllWithPredicate(s => s.WorkoutId == null);
        exercises = baseExercises.ToList();
        StateHasChanged();
    }
    private async Task ShowAddExerciseComponent(Guid id)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("ExerciseId", id);
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, Load));
        await offcanvas.ShowAsync<AddExercise>(title: "Add exercise", parameters: parameters);
    }
    private async Task ShowEditExerciseComponent(Guid id)
    {
        var parameters = new Dictionary<string, object>();
        parameters.Add("ExerciseId", id);
        parameters.Add("OnclickCallback", EventCallback.Factory.Create<MouseEventArgs>(this, Load));
        await offcanvas.ShowAsync<AddExercise>(title: "Edit exercise", parameters: parameters);
    }
    private async Task ShowConfirmationAsync(Exercise exercise)
    {
        var confirmation = await dialog.ShowAsync(
            title: "Are you sure you want to delete this?",
            message1: "This will delete the record. Once deleted can not be rolled back.",
            message2: exercise.Name);

        if (confirmation)
        {
            var baseExercises = await ExerciseRepository.GetAllWithPredicate(s => s.WorkoutId == null);
            exercises = baseExercises.ToList();
            exercisesGroups = exercises
                .GroupBy(s => s.MuscleGroup)
                .OrderBy(x => x.Key)
                .ToList();
            StateHasChanged();
        }
    }
}