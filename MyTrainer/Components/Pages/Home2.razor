@page "/"

@using MyTrainer.Models
@using MyTrainer.Data

@inject Repository<Workout> WorkoutRepository
@inject Repository<Schedule> ScheduleRepository
@inject Repository<Exercise> ExerciseRepository
@inject Repository<Set> SetRepository

@foreach(var workout in workouts)
{
    
    @if (workout is not null && workout.Exercises is not null)
    {
        var color1 = workout.WorkoutState switch
        {
            WorkoutState.Complited => "secondary",
            WorkoutState.InProcess => "primary",
            WorkoutState.InWaiting => "warning",
            _ => "info"
        };
        var time = workout.FinishedAt - workout.StartedAt;
        <Accordion class="@($"mb-2 btn btn-{color1}")">
            <AccordionItem Title="@($"{keyValuePairs[workout.Id]} - {workout.Name} - {time.Hours}:{time.Minutes.ToString("D2")}")">
                <Content>
                    @if (workout.WorkoutState == WorkoutState.InWaiting)
                    {
                        <div class="mb-5">
                            <Button Class="btn btn-primary btn-sm col-12" @onclick="@(() => StartAsync(workout))">Начать тренировку</Button>
                        </div>
                    }
                    
                    @foreach (var exercise in workout.Exercises.OrderBy(s => s.Index))
                    {
                        <Alert Color="AlertColor.Primary">
                            <div class="row m-1">
                                @exercise.Index. @exercise.Name | @exercise.MuscleGroup | @exercise.Description
                            </div>
                            <div class="row m-1">
                                @exercise.SetCount x @exercise.Reps
                            </div>
                            <div class="row col-2 m-1">
                                <a href="@exercise.Url" class="btn btn-secondary btn-sm">Link</a>
                            </div>
                            @if(workout.WorkoutState > WorkoutState.None)
                            {
                                <Accordion Class="mb-2">
                                    <AccordionItem Title="Progress">
                                        <Content>
                                            @foreach (var set in exercise.Sets.OrderBy(s => s.Index))
                                            {
                                                <Alert Color="AlertColor.Info">
                                                    <div class="row m-1">
                                                        <div class="col">
                                                            @set.Index
                                                        </div>
                                                        <div class="col">
                                                            <input @bind="@set.ActualReps" />
                                                        </div>
                                                        <div class="col">
                                                            <input @bind="@set.ActualWeight" />
                                                        </div>
                                                        <div class="col">
                                                            <Button Class="btn btn-primary btn-sm mt-2" @onclick="@(() => SaveSet(set))">Save</Button>
                                                        </div>
                                                    </div>
                                                </Alert>
                                            }
                                        </Content>
                                    </AccordionItem>
                                </Accordion>
                            }
                        </Alert>
                    }
                    @if (workout.WorkoutState == WorkoutState.InProcess)
                    {
                        <div class="mb-5">
                            <Button Class="btn btn-primary btn-sm col-12" @onclick="@(() => StopAsync(workout))">Завершить тренировку</Button>
                        </div>
                    }
                </Content>
            </AccordionItem>
        </Accordion>
        <br/>
    }
    
}
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    // private Workout workoutInProcess = new();
    List<ToastMessage> messages = new List<ToastMessage>();
    private Dictionary<Guid, string> keyValuePairs = new();
    private List<Workout> workouts = new();

    protected override async Task OnInitializedAsync()
    {
        var w = await WorkoutRepository.GetAllWithPredicate(s => s.WorkoutState > WorkoutState.None);
        workouts = w.OrderByDescending(x => x.WorkoutState).ToList();
        foreach (var workout in workouts)
        {
            var sch = await ScheduleRepository.GetAllWithPredicate(s => s.WorkoutId == workout.Id);
            keyValuePairs.Add(workout.Id, sch.FirstOrDefault().Date.ToString());
            if (workout!.Exercises is null || workout.Exercises.Count() == 0)
            {
                var exercises = await ExerciseRepository.GetAllWithPredicate(s => s.WorkoutId == workout.Id);
                workout.Exercises = exercises.ToList();
                foreach (var exercise in workout.Exercises)
                {
                    var sets = await SetRepository.GetAllWithPredicate(s => s.ExerciseId == exercise.Id);
                    exercise.Sets = sets.ToList();
                }
            }
            
        }

        await base.OnInitializedAsync();
    }

    private async Task StartAsync(Workout workout)
    {
        workout.WorkoutState = WorkoutState.InProcess;
        workout.StartedAt = DateTime.Now;
        await WorkoutRepository.UpdateAsync(workout);
        StateHasChanged();
    }
    private async Task StopAsync(Workout workout)
    {
        workout.WorkoutState = WorkoutState.Complited;
        workout.FinishedAt = DateTime.Now;
        await WorkoutRepository.UpdateAsync(workout);
        StateHasChanged();
    }
    private async Task SaveSet(Set set)
    {
        var ex = await ExerciseRepository.GetByIdAsync(set.ExerciseId);
        ex.IsComplited = true;
        await ExerciseRepository.UpdateAsync(ex);
        await SetRepository.UpdateAsync(set);
        ShowMessage("Сохранено", ToastType.Success);
    }

    public void Notify(string message)
    {
        ShowMessage(message, ToastType.Success);
        StateHasChanged();
    }

    private void ShowMessage(string message, ToastType toastType) =>
        messages.Add(new ToastMessage { Type = toastType, Message = message });
}
